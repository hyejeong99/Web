(function($) {

// http://ifandelse.com/its-not-hard-making-your-library-support-amd-and-commonjs/
(function(root, factory) {
  if(typeof module === "object" && module.exports){
    // CommonJS
    // I've not encountered a need for this yet, since I haven't
    // run into a scenario where plain modules depend on CommonJS
    // *and* I happen to be loading in a CJS browser environment
    // but I'm including it for the sake of being thorough
    module.exports = factory();
  } else if (typeof define === "function" && define.amd) {
    // AMD
    // Now we're wrapping the factory and assigning the return
    // value to the root (window) and returning it as well to
    // the AMD loader.
    define(function(){
      return factory();
    });
  } else {
    // global
    window.ellipsis = factory();
  }
})(this, function() {
  // 말줄임 인스턴스가 생성된 요소에 이 배열참조 인덱스가 지정된다. 
  var count = 0;

  /**
   * Ellipsis클래스의 인스턴스를 생성한다.
   * @classdesc 말줄임을 수행하는 클래스. private클래스이기 때문에 외부에서 직접 접근할 수 없다.
   * @constructs Ellipsis
   * @param {String|HTMLElement|jQuery} el `_ellipsis` 클래스가 지정된 말줄임 적용 대상 요소.
   * @param {Object} [config] 생성 설정값 객체.
   * @param {String} [config.ellipsisSign="..."] 말줄임시 줄여진 표시를 나타내는 기호.
   * @param {String} [config.handleRotateEvent=true] 단말기 회전시 모듈내에서 말줄임을 재수행할지 여부.
   */
  var Ellipsis = function(el, _config) {
    var $el;
    var config = _config || {};

    // define construct parameter
    this.ellipsisSign = config.ellipsisSign || "...";
    this.handleRotateEvent = typeof config.handleRotateEvent === "undefined" ? true : config.handleRotateEvent;
    $el = $(el);

    // assign value to member variables
    if ($el.get(0)) {
      $el.attr("data-ellipsis-managed", count++);
      this._el = $el.get(0);
      this._$el = $el;
      this._text = $el.find("._text").text();
      this._style = $el.attr("style");
    }

    // start application
    this.work();

    // attach event listener
    // work() 전에 호출하면 ie8에서 핸들러가 호출되지 않는다.
    $el.on("click", "._unomit", $.proxy(this, "_onUnomitClick"));
  };

  Ellipsis.prototype = {
    constructor: Ellipsis,

    /**
     * 말이 생략됐는지(말줄임 됐는지) 여부를 반환한다.
     * @memberOf Ellipsis#
     * @return {Boolean} 말이 생략됐는지 여부. `true`: 생략됨, `false`: 생략안됨 (초기상태이거나, 모든 말이 노출됐거나.)
     */
    isOmitted: function() {
      return $(this._el).attr("data-ellipsis-omitted") === "true";
    },

    /**
     * 인스턴스를 더이상 사용하지 않을 때 사용하는 메서드.
     * 내부에서 부착한 이벤트 핸들러를 뗀다.
     * 멤버변수에 null을 지정한다.
     * 인스턴스 메서드가 더이상 정상동작 하지 않게 된다.
     * @memberOf Ellipsis#
     */
    destroy: function() {
      $(this._el).off("click", "._unomit", this._onUnomitClick);
      this._el = this._text = null;
    },

    /**
     * 현재 노출된 말의 총 줄 수를 반환한다.
     * 말줄임 되었든 아니든 반환한다.
     * `data-ellipsis-row`속성을 통해서도 참조할 수 있다.
     * @memberOf Ellipsis#
     * @return {Number} 양의 정수.
     */
    row: function() {
      return Math.floor(this._el.clientHeight / this._oneLineHeight);
    },

    /**
     * 초기상태로 되돌린다. (`data-ellipsis-`로 시작하는 속성들은 삭제되지 않음.)
     * `data-ellipsis-omitted`속성값은 `false`가 됨.
     * @memberOf Ellipsis#
     * @return {Ellipsis} 현재 인스턴스.
     */
    revert: function() {
      $(this._el).attr("style", this._style)
        .attr("data-ellipsis-row", this.row())
        .attr("data-ellipsis-omitted", "false").find("._text").text(this._text);
      return this;
    },

    /**
     * 말을 줄인다. (줄임 시작 부분에 말줄임 기호가 노출됨)
     * @memberOf Ellipsis#
     * @return {Ellipsis} 현재 인스턴스.
     */
    work: function() {
      if (!this._el) return;

      var $el = $(this._el).attr("style", this._style)
        .find("._text")
        .text(this._text)
        .end();
      var $text = $el.find("._text");
      var $tail = $el.find("._tail");
      // width() 메서드를 통해 너비를 지정하면 145.094px의 경우 내림되어 145px 로 지정되는 이슈가 있으므로 css("width") 로 지정함
      // css("width") 역시 부정확한 면이 있어서 getBoundingClientRect().width 속성값을 참조함.
      var width = $el.get(0).getBoundingClientRect().width || parseInt($el.css("width"), 10);
      // 가로 패딩. horizontal padding
      var hp = parseFloat($el.css("padding-left")) + parseFloat($el.css("padding-right"));
      var height = $el.height();

      // el 을 복제한 요소
      var $cloned = $(this._el.cloneNode(true));

      // 실제 말줄임을 적용할 요소
      var $clonedText = $($cloned.find("._text"));

      // $text 의 textContent
      var text = $clonedText.text();

      // 말줄임 되었을 때만 맨 마지막에 붙어야 하는 element. (예:더보기)
      var $clonedTail = $($cloned.find("._tail"));

      // 화면에 노출되지 않을 때엔 정상동작 하지 않으므로 건너뛴다.
      var condition0 = height < 1;

      // hidden 혹은 visible 일 때만 말줄임을 적용한다.
      var condition1 = $el.css("overflow") !== "hidden" && $el.css("overflow") !== "visible";

      // ._text 요소의 존재 여부
      var condition2 = !$clonedText.get(0);

      // max-height를 풀었을 때 풀기전과 비교하여 높이가 커졌는지 여부.
      // (커졌다면 말줄임을 해야한다는 뜻)
      // 안드로이드 크롬앱의 폰트 부스팅 기능을 회피하기 위해 'max-height: none'대신
      // 'max-height: 99999px'사용
      var overflowed = height < $el.css("max-height", "99999px").height();
      // style값 원복
      $el.attr("style", this._style);

      // 말줄임이 됐는지 여부
      var isOmitted = false;

      if (condition0 || condition1 || condition2) return;

      // 복제본의 텍스트를 줄여 나가는 이유는
      // 'position: absolute'요소는 reflow를 발생시키지 않기 때문이다.
      $cloned.css({
        position: "absolute",
        overflow: "visible"
      }).css({
        "height": "auto",
        // 안드로이드 크롬앱의 폰트 부스팅 기능을 회피하기 위해 'max-height: none'대신
        // 'max-height: 99999px'사용
        "max-height": "99999px",
        "width": (width - hp) + "px"
      });
      $el.after($cloned).attr("data-ellipsis-omitted", isOmitted);

      if (overflowed) {
        if (this._reduce(height, $cloned, $clonedText, $clonedText.text())) {
          // text가 없거나 복제요소의 높이가 원본보다 작아질 때까지 반복한다. 
          text = $clonedText.text();
          while (text.length && $cloned.height() > height) {
            text = text.substr(0, text.length - 1);
            $clonedText.text(text + this.ellipsisSign);
            $clonedTail.get(0) && ($clonedTail.css("display", ""), $tail.css("display", ""));
            !isOmitted && $el.attr("data-ellipsis-omitted", "true");
            isOmitted = true;
          }
        }
      }

      $text.text($clonedText.text());
      $clonedText.text("A");
      this._oneLineHeight = $cloned.height();
      $el.attr("data-ellipsis-row", this.row());
      $cloned.remove();
      return this;
    },

    /**
     * 초기상태 기준으로, 가려져서 보이지 않던 말을 노출한다.
     * [revert()]{@link Ellipsis#revert}는 초기상태로 되돌리는 것이고 [unomit()]{@link Ellipsis#unomit}은 가려져 보이지 않던 말을 노출시키는 것이다.
     * @memberOf Ellipsis#
     * @returns {Ellipsis} 현재 인스턴스.
     */
    unomit: function() {
      this.revert();
      $(this._el).css("max-height", "99999px")
        .attr("data-ellipsis-omitted", "false");
      $(this._el).find("._tail").hide();
      return this;
    },

    // text문자열을 반으로 줄여 나간다. 그러다 height보다 작아지면 _grow()로 넘어간다.
    _reduce: function(height, $el, $t, text) {
      var i = Math.ceil(text.length / 2);
      var f = text.substr(0, i);
      var b = text.substr(i);

      $t.text(f);
      if ($el.height() > height) {
        return this._reduce(height, $el, $t, f);
      } else {
        return this._grow(height, $el, $t, f, b);
      }
    },

    // text문자열에 rest의 앞 절반을 더해 나간다. 그러다 height보다 커지면 true를 반환한다.
    _grow: function(height, $el, $t, text, rest) {
      var i = Math.ceil(rest.length / 2);
      var f = rest.substr(0, i);
      var b = rest.substr(i);

      $t.text(text + f);
      if ($el.height() <= height) {
        return this._grow(height, $el, $t, text + f, b);
      } else {
        return true;
      }
    },

    _onUnomitClick: function(e) {
      e.preventDefault();
      this.unomit();
    }
  };

  // 기본적으로 단말기 회전 이벤트는 "orientationchange"를 사용한다.
  // 이 이벤트를 지원하지 않는 하위 브라우저는 일단 대응하지 않는다.
  // 네이버 검색에서는 이 아래 라인에서 "rotate" 이벤트를 취하게 되므로 본 모듈의 하위 호환상의 문제는 없다.
  var rotateType = "orientationchange";
  // jquery에 egjs의 rotate 이벤트 플러그인이 정의된 경우는 그것을 사용한다.
  try { if (jQuery.event.special.rotate) rotateType = "rotate"; } catch (e) {}
  var ellipsises = [];
  var reomit = function(ellip) {
    if (ellip.handleRotateEvent) ellip.revert().work();
  };

  // attach event listener
  $(window).on(rotateType, function(e) {
    if (e.type === "orientationchange") {
      // 'orientationchange' event는 html이 렌더링 되기 전에 발생하는 듯 하다. 정상동작을 위해 100ms delay를 준다.
      setTimeout(function() { ellipsises.forEach(reomit); }, 100);
    } else {
      ellipsises.forEach(reomit);
    }
  });
  $(window).on("pageshow", function(e) {
    // zepto에는 originalEvent속성이 없다.
    var persisted = e.originalEvent ? e.originalEvent.persisted : e.persisted;
    // 모바일 환경에서 '페이지 이탈 > 단말기 회전 > 복귀'인 경우 말줄임을 재적용하기 위함
    persisted && ellipsises.forEach(function(ellip) {
      ellip.revert().work();
    });
  });

  /**
   * 본문의 javascript예제 코드는 아래 html구조를 기반으로 작성되었다.
   * ```html
   * <div id="box">
   * 	<p class="_ellipsis"><span class="_text">일이삼사오육칠팔구십</span></p>
   * 	<p class="_ellipsis"><span class="_text">일이삼사오육칠팔구십</span></p>
   * 	<p class="_ellipsis"><span class="_text">일이삼사오육칠팔구십</span></p>
   * 	<p class="_ellipsis"><span class="_text">일이삼사오육칠팔구십</span></p>
   * </div>
   * ```
   * 페이징을 통해 매번 새로이 그려지는 목록에 말줄임을 적용하는 구조라면, 목록을 그리고 난 후 아래처럼 할 것을 권장함.
   * ```javascript
   * ellipsis.destroy().reset().work("#box"); // 앞서 생성된 Ellipsis인스턴스를 모두 파괴하고 내부배열을 비우고 카운트를 0으로 지정한 후 `[id=box] ._ellipsis`요소들에 말줄임 적용.
   * ```
   * @module ellipsis
   */
  var ellipsis = {
  /**
   * 말을 줄인다. (줄임 시작 부분에 말줄임 기호가 노출됨)
   * 내부적으로 `revert()`를 호출한 후 말줄임을 수행하므로 이 메서드 호출전에 `revert()`를 호출할 필요가 없다.
   * `el`인자 값을 `jQuery(el)`의 인자로 지정하여 선택된 요소가 그 대상이다.
   * `jQuery(el)`에서 선택된 요소가 한 개이고 `_ellipsis` class를 가지고 있다면 그 요소에,
   * 아니라면 그 하위요소중 `_ellipsis` class가 지정된 요소에 말줄임을 적용한다.
   * `jQuery(el)` 선택 요소가 여러 개인 경우 그 요소들에 말줄임을 적용한다.
   * @memberOf module:ellipsis~
   * @param {String|HTMLElement|Array|jQuery} el 말줄임을 적용할 요소.
   * 말줄임을 적용할 요소를 원소로 갖는 배열.
   * 말줄임을 적용할 요소를 선택할 셀렉터 문자열.
   * 말줄임을 적용할 요소를 가진 jQuery객체.
   * @param {Object} config 말줄임 설정값 객체.
   * @param {String} [config.ellipsisSign="..."] 말줄임 문자열
   * @param {Boolean} [config.handleRotateEvent=true] 단말기 회전시 모듈내에서 말줄임을 재수행할지 여부.
   * @return {module:ellipsis} {@link module:ellipsis}객체
   * @example <caption>`el`이 String인 경우</caption>
   * ellipsis.work("#box"); // `box` id를 가진 요소가 선택되며 그 요소 하위에서 '_ellipsis'클래스를 가진 요소에 말줄임 적용.
   * ellipsis.work("._ellipsis"); // `._ellipsis` 클래스가 지정된 요소가 선택되며 그 요소들에 말줄임 적용.
   * @example <caption>`el`이 HTMLElement인 경우</caption>
   * ellipsis.work(document.querySelector("#box")); // `box` id를 가진 요소가 선택되며 그 요소 하위에서 '_ellipsis'클래스를 가진 요소에 말줄임 적용.
   * ellipsis.work(document.querySelector("._ellipsis")); // `._ellipsis` 클래스가 지정된 요소중 첫 번째 요소가 선택되며 그 요소에 말줄임 적용.
   * @example <caption>`el`이 Array인 경우</caption>
   * ellipsis.work(Array.prototype.concat.apply([], document.querySelectorAll("._ellipsis"))); // 배열의 원소인 요소들에 말줄임 적용.
   * @example <caption>`el`이 jQuery인 경우</caption>
   * ellipsis.work(jQuery("#box")); // `box` id를 가진 요소가 선택되며 그 요소 하위에서 '_ellipsis'클래스를 가진 요소에 말줄임 적용.
   * ellipsis.work(jQuery("._ellipsis")); // `._ellipsis` 클래스가 지정된 요소가 선택되며 그 요소들에 말줄임 적용.
   */
    work: function(el, config) {
      var $el = $(el);
      var $els = $el.length > 2 ? $el : $el.hasClass("_ellipsis") ? $el : $el.find("._ellipsis");

      Array.prototype.push.apply(ellipsises, $.grep($els.map(function(i, el) {
        var obj = ellipsises[parseInt($(el).attr("data-ellipsis-managed"), 10)];

        if (obj) {
          obj.revert().work();
          return null;
        } else {
          return new Ellipsis(el, config);
        }
      }), function(obj) {
        return !!obj;
      }));
      return this;
    },

    /**
     * 초기상태 기준으로, 가려져서 보이지 않던 말을 노출한다. 현재까지 관리되고 있는 모든 {@link Ellipsis}인스턴스의 [unomit()]{@link Ellipsis#unomit}메서드를 호출한다.
     * @memberOf module:ellipsis~
     * @returns {module:ellipsis} {@link module:ellipsis}객체
     */
    unomit: function() {
      $.map(ellipsises, function(obj) {obj.unomit();});
      return this;
    },

    /**
     * index를 지정하면 해당 인덱스의 {@link Ellipsis}인스턴스를, 지정하지 않는다면 내부 관리 배열의 복사본을 반환한다.
     * @memberOf module:ellipsis~
     * @param {Number|String|HTMLElement|jQuery} index 0부터 시작하는 정수. 내부적으로 `parseInt(index, 10)`반환값 사용.
     * `HTMLElement`혹은 `jQuery`객체 지정시, 해당 요소의 'data-ellipsis-managed' attribute 값을 `index`로 사용한다.
     * @return {Array|Ellipsis} {@link Ellipsis}인스턴스를 원소로 갖는 배열의 복사본 혹은 index위치의 {@link Ellipsis}인스턴스.
     * @example <caption>index 파람 값으로 Number, String을 지정하는 예</caption>
     * ellipsis.work("#box").get(); // `Ellipsis 인스턴스를 원소로 갖는 배열. 복사본이다. (매번 새 배열 반환)
     * ellipsis.work("#box").get(0); // 그 중 첫 번째 원소
     * ellipsis.work("#box").get("0"); // 위와 동일.
     * @example <caption>index 파람 값으로 jQuery를 지정하는 예</caption>
     * <!--html-->
     * <div class="_ellipsis"><span class="_text">텍스트</span></div>
     * 
     * // javascript
     * const $el = $("._ellipsis");
     * ellipsis.work($el); // 말줄임 적용
     * ellipsis.get($el); // `$el`요소의 말줄임을 담당하는 `Ellipsis`의 인스턴스 반환
     * ellipsis.get($el.get(0)); // 위와 동일
     */
    get: function(index) {
      if (arguments.length) {
        index = $.isNumeric(index) ? index : $(index).attr("data-ellipsis-managed");
        return ellipsises[parseInt(index, 10)];
      } else {
        return ellipsises.concat();
      }
    },

    /**
     * 현재까지 관리되고 있는 모든 {@link Ellipsis}인스턴스의 [row()]{@link Ellipsis#row}메서드 반환값을 배열에 담아 반환한다.
     * @memberOf module:ellipsis~
     * @return {Array} 줄 수를 원소로 갖는 배열. ex. [2, 1, 1, 2]
     * @example
     * ellipsis.work("#box").rows();
     */
    rows: function() {
      return $.map(ellipsises, function(obj) {return obj.row();});
    },

    /**
     * 관리되고 있는 모든 요소들을, 말을 줄이기 이전(초기상태)으로 되돌린다.
     * @memberOf module:ellipsis~
     * @return {module:ellipsis} {@link module:ellipsis}객체
     * @example
     * ellipsis.work("#box").revert(); // 말줄임 적용전 상태(초기상태)로 되돌린다.
     */
    revert: function() {
      $.map(ellipsises, function(obj) {obj.revert();});
      return this;
    },

    /**
     * 현재까지 관리되고 있는 모든 {@link Ellipsis}인스턴스의 [destroy()]{@link Ellipsis#destroy}메서드를 호출한다.
     * {@link Ellipsis}인스턴스를 더이상 관리할 필요가 없을 때 사용. (말줄임 대상 요소가 더이상 dom 트리에 존재하지 않을 때등)
     * @memberOf module:ellipsis~
     * @return {module:ellipsis} {@link module:ellipsis}객체
     * @example
     * ellipsis.work("#box"); // [id=box]요소 하위 요소들에 말줄임 적용.
     * jQuery("#box").html(""); // [id=box]요소 내용이 변경됨에 따라 말줄임 객체를 더이상 관리히지 않아도 되는 상황.
     * ellipsis.destroy(); // `destroy()`메서드를 호출해서 각 말줄임 인스턴스의 멤버변수를 비운다.
     */
    destroy: function() {
      $.map(ellipsises, function(obj) {obj.destroy();});
      return this;
    },

    /**
     * 말줄임을 적용할 때마다 관리를 위한 카운트가 1씩 증가하는데 이 카운트를 `0`으로 지정하고,
     * 내부적으로 관리중인 {@link Ellipsis}인스턴스를 원소로 담고 있는 배열을 모두 비운다.
     * 이 메서드 호출후 말줄임 적용시 `data-ellipsis-managed`속성 정수값은 `0`부터 시작한다.
     * 모종의 이유로 내부 배열을 비우고 카운트를 0으로 지정해야할 때 사용.
     * @memberOf module:ellipsis~
     * @return {module:ellipsis} {@link module:ellipsis}객체
     * @example
     * var arr = ellipsis.work("#box").get(); // [id=box]요소 하위엔 4개의 ._ellipsis 요소가 존재하므로 카운트는 4를 가리킨다.
     * ellipsis.reset(); // 내부배열은 비워지고 카운트는 0을 가리킨다.
     * ellipsis.get(); // []. 빈배열이 반환된다.
     * arr[0]; // `get()`메서드가 반환하는 값은 복사본이므로 각 원소를 여전히 참조 가능하다.
     */
    reset: function() {
      ellipsises.length = count = 0;
      return this;
    },

    /**
     * 모듈 버전 문자열. ex. `"2.0.0"`
     * @memberOf module:ellipsis~
     * @const
     * @static
     */
    VERSION: "5.0.1"
  };
  return ellipsis;
});

})(jQuery);
